/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { DecimalOracle, DecimalOracleInterface } from "../DecimalOracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_decimal",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "decimal",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "ethOutput",
        type: "uint256",
      },
    ],
    name: "getTokenValueOfEth",
    outputs: [
      {
        internalType: "uint256",
        name: "tokenInput",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161032038038061032083398101604081905261002f91610037565b600055610050565b60006020828403121561004957600080fd5b5051919050565b6102c18061005f6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806376809ce31461003b578063d1eca9cf14610056575b600080fd5b61004460005481565b60405190815260200160405180910390f35b610044610064366004610098565b6000670de0b6b3a7640000600054600a61007e9190610200565b6100889084610213565b6100929190610250565b92915050565b6000602082840312156100aa57600080fd5b5035919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b8085111561013957817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561011f5761011f6100b1565b8085161561012c57918102915b93841c93908002906100e5565b509250929050565b60008261015057506001610092565b8161015d57506000610092565b8160018114610173576002811461017d57610199565b6001915050610092565b60ff84111561018e5761018e6100b1565b50506001821b610092565b5060208310610133831016604e8410600b84101617156101bc575081810a610092565b6101c683836100e0565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156101f8576101f86100b1565b029392505050565b600061020c8383610141565b9392505050565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561024b5761024b6100b1565b500290565b600082610286577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220392e2f3466a22f38b9426461814b03f1a4870ff615e513c08351ff8876499d6364736f6c634300080f0033";

type DecimalOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: DecimalOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class DecimalOracle__factory extends ContractFactory {
  constructor(...args: DecimalOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _decimal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<DecimalOracle> {
    return super.deploy(_decimal, overrides || {}) as Promise<DecimalOracle>;
  }
  override getDeployTransaction(
    _decimal: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_decimal, overrides || {});
  }
  override attach(address: string): DecimalOracle {
    return super.attach(address) as DecimalOracle;
  }
  override connect(signer: Signer): DecimalOracle__factory {
    return super.connect(signer) as DecimalOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): DecimalOracleInterface {
    return new utils.Interface(_abi) as DecimalOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): DecimalOracle {
    return new Contract(address, _abi, signerOrProvider) as DecimalOracle;
  }
}
