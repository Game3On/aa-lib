/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { USDPaymaster, USDPaymasterInterface } from "../USDPaymaster";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "accountFactory",
        type: "address",
      },
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
      {
        internalType: "contract IERC20",
        name: "_usdToken",
        type: "address",
      },
      {
        internalType: "contract IOracle",
        name: "_oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "COST_OF_POST",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "unstakeDelaySec",
        type: "uint32",
      },
    ],
    name: "addStake",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "deposit",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "entryPoint",
    outputs: [
      {
        internalType: "contract IEntryPoint",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getDeposit",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "oracle",
    outputs: [
      {
        internalType: "contract IOracle",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "enum IPaymaster.PostOpMode",
        name: "mode",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "actualGasCost",
        type: "uint256",
      },
    ],
    name: "postOp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IEntryPoint",
        name: "_entryPoint",
        type: "address",
      },
    ],
    name: "setEntryPoint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "theFactory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "usdToken",
    outputs: [
      {
        internalType: "contract IERC20",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sender",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "initCode",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "callData",
            type: "bytes",
          },
          {
            internalType: "uint256",
            name: "callGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "verificationGasLimit",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "preVerificationGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxFeePerGas",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "maxPriorityFeePerGas",
            type: "uint256",
          },
          {
            internalType: "bytes",
            name: "paymasterAndData",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct UserOperation",
        name: "userOp",
        type: "tuple",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "uint256",
        name: "requiredPreFund",
        type: "uint256",
      },
    ],
    name: "validatePaymasterUserOp",
    outputs: [
      {
        internalType: "bytes",
        name: "context",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
    ],
    name: "withdrawStake",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address payable",
        name: "withdrawAddress",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "withdrawTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60a06040523480156200001157600080fd5b50604051620016183803806200161883398101604081905262000034916200017b565b82620000403362000085565b6200004b81620000d5565b506001600160a01b03938416608052600280549285166001600160a01b0319938416179055600380549190941691161790915550620001e3565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b620000df62000101565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314620001605760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640160405180910390fd5b565b6001600160a01b03811681146200017857600080fd5b50565b600080600080608085870312156200019257600080fd5b84516200019f8162000162565b6020860151909450620001b28162000162565b6040860151909350620001c58162000162565b6060860151909250620001d88162000162565b939692955090935050565b60805161141262000206600039600081816102350152610fdc01526114126000f3fe60806040526004361061010e5760003560e01c8063a9a23409116100a5578063c399ec8811610074578063f2fde38b11610059578063f2fde38b146102f6578063f465c77e14610316578063f897a22b1461034457600080fd5b8063c399ec88146102d9578063d0e30db0146102ee57600080fd5b8063a9a2340914610257578063b0d691fe14610277578063bb9fe6bf146102a4578063c23a5cea146102b957600080fd5b8063796d4371116100e1578063796d43711461017d5780637dc0d1d0146101a65780638da5cb5b146101f85780639f5ca2211461022357600080fd5b80630396cb6014610113578063205c287814610128578063584465f214610148578063715018a614610168575b600080fd5b61012661012136600461108e565b610371565b005b34801561013457600080fd5b506101266101433660046110dd565b610407565b34801561015457600080fd5b50610126610163366004611109565b610483565b34801561017457600080fd5b506101266104d2565b34801561018957600080fd5b50610193613a9881565b6040519081526020015b60405180910390f35b3480156101b257600080fd5b506003546101d39073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161019d565b34801561020457600080fd5b5060005473ffffffffffffffffffffffffffffffffffffffff166101d3565b34801561022f57600080fd5b506101d37f000000000000000000000000000000000000000000000000000000000000000081565b34801561026357600080fd5b50610126610272366004611126565b6104e6565b34801561028357600080fd5b506001546101d39073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102b057600080fd5b50610126610500565b3480156102c557600080fd5b506101266102d4366004611109565b610586565b3480156102e557600080fd5b50610193610616565b6101266106ae565b34801561030257600080fd5b50610126610311366004611109565b61071a565b34801561032257600080fd5b506103366103313660046111b5565b61072e565b60405161019d929190611209565b34801561035057600080fd5b506002546101d39073ffffffffffffffffffffffffffffffffffffffff1681565b610379610c80565b6001546040517f0396cb6000000000000000000000000000000000000000000000000000000000815263ffffffff8316600482015273ffffffffffffffffffffffffffffffffffffffff90911690630396cb609034906024016000604051808303818588803b1580156103eb57600080fd5b505af11580156103ff573d6000803e3d6000fd5b505050505050565b61040f610c80565b6001546040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018490529091169063205c287890604401600060405180830381600087803b1580156103eb57600080fd5b61048b610c80565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6104da610c80565b6104e46000610d01565b565b6104ee610d76565b6104fa84848484610d9a565b50505050565b610508610c80565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561057257600080fd5b505af11580156104fa573d6000803e3d6000fd5b61058e610c80565b6001546040517fc23a5cea00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83811660048301529091169063c23a5cea90602401600060405180830381600087803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b5050505050565b6001546040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009173ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610685573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106a99190611284565b905090565b6001546040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9091169063b760faf99034906024016000604051808303818588803b1580156105fb57600080fd5b610722610c80565b61072b81610ee5565b50565b6003546040517fd1eca9cf00000000000000000000000000000000000000000000000000000000815260048101839052606091600091829173ffffffffffffffffffffffffffffffffffffffff169063d1eca9cf90602401602060405180830381865afa1580156107a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c79190611284565b9050613a988660a0013511610862576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5553445061796d61737465723a2067617320746f6f206c6f7720666f7220706f60448201527f73744f700000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61086f604087018761129d565b1590506109cc5761087f86610f99565b600254819073ffffffffffffffffffffffffffffffffffffffff166370a082316108ac60208a018a611109565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611284565b10156109c7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602560248201527f5553445061796d61737465723a206e6f2062616c616e636520287072652d637260448201527f65617465290000000000000000000000000000000000000000000000000000006064820152608401610859565b610c16565b600254819073ffffffffffffffffffffffffffffffffffffffff166370a082316109f960208a018a611109565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602401602060405180830381865afa158015610a62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a869190611284565b1015610aee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f5553445061796d61737465723a206e6f2062616c616e636500000000000000006044820152606401610859565b600254819073ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e610b1b60208a018a611109565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152306024820152604401602060405180830381865afa158015610b8a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bae9190611284565b1015610c16576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5553445061796d61737465723a206e6f20616c6c6f77616e63650000000000006044820152606401610859565b610c236020870187611109565b6040805173ffffffffffffffffffffffffffffffffffffffff909216602083015201604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190529660009650945050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104e4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610859565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60015473ffffffffffffffffffffffffffffffffffffffff1633146104e457600080fd5b6000610da883850185611109565b60035490915060009073ffffffffffffffffffffffffffffffffffffffff1663d1eca9cf610dd8613a9886611309565b6040518263ffffffff1660e01b8152600401610df691815260200190565b602060405180830381865afa158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611284565b6002546040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152306024830152604482018490529293509116906323b872dd906064016020604051808303816000875af1158015610eb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610edc9190611348565b50505050505050565b610eed610c80565b73ffffffffffffffffffffffffffffffffffffffff8116610f90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610859565b61072b81610d01565b6000610fa8604083018361129d565b610fb79160149160009161136a565b610fc091611394565b60601c905073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016811461108a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602360248201527f5553445061796d61737465723a2077726f6e67206163636f756e74206661637460448201527f6f727900000000000000000000000000000000000000000000000000000000006064820152608401610859565b5050565b6000602082840312156110a057600080fd5b813563ffffffff811681146110b457600080fd5b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461072b57600080fd5b600080604083850312156110f057600080fd5b82356110fb816110bb565b946020939093013593505050565b60006020828403121561111b57600080fd5b81356110b4816110bb565b6000806000806060858703121561113c57600080fd5b84356003811061114b57600080fd5b9350602085013567ffffffffffffffff8082111561116857600080fd5b818701915087601f83011261117c57600080fd5b81358181111561118b57600080fd5b88602082850101111561119d57600080fd5b95986020929092019750949560400135945092505050565b6000806000606084860312156111ca57600080fd5b833567ffffffffffffffff8111156111e157600080fd5b840161016081870312156111f457600080fd5b95602085013595506040909401359392505050565b604081526000835180604084015260005b81811015611237576020818701810151606086840101520161121a565b81811115611249576000606083860101525b50602083019390935250601f919091017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601606001919050565b60006020828403121561129657600080fd5b5051919050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126112d257600080fd5b83018035915067ffffffffffffffff8211156112ed57600080fd5b60200191503681900382131561130257600080fd5b9250929050565b60008219821115611343577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b60006020828403121561135a57600080fd5b815180151581146110b457600080fd5b6000808585111561137a57600080fd5b8386111561138757600080fd5b5050820193919092039150565b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000081358181169160148510156113d45780818660140360031b1b83161692505b50509291505056fea26469706673582212201c1fbe3e4382d5f02faedb14b9004f45cc668b4cbfdf3bae8db606c9b66a10c964736f6c634300080f0033";

type USDPaymasterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: USDPaymasterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class USDPaymaster__factory extends ContractFactory {
  constructor(...args: USDPaymasterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    accountFactory: PromiseOrValue<string>,
    _entryPoint: PromiseOrValue<string>,
    _usdToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<USDPaymaster> {
    return super.deploy(
      accountFactory,
      _entryPoint,
      _usdToken,
      _oracle,
      overrides || {}
    ) as Promise<USDPaymaster>;
  }
  override getDeployTransaction(
    accountFactory: PromiseOrValue<string>,
    _entryPoint: PromiseOrValue<string>,
    _usdToken: PromiseOrValue<string>,
    _oracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      accountFactory,
      _entryPoint,
      _usdToken,
      _oracle,
      overrides || {}
    );
  }
  override attach(address: string): USDPaymaster {
    return super.attach(address) as USDPaymaster;
  }
  override connect(signer: Signer): USDPaymaster__factory {
    return super.connect(signer) as USDPaymaster__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): USDPaymasterInterface {
    return new utils.Interface(_abi) as USDPaymasterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): USDPaymaster {
    return new Contract(address, _abi, signerOrProvider) as USDPaymaster;
  }
}
